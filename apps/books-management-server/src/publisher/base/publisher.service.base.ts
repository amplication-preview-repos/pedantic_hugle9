/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Publisher as PrismaPublisher,
  Book as PrismaBook,
} from "@prisma/client";

export class PublisherServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PublisherCountArgs, "select">
  ): Promise<number> {
    return this.prisma.publisher.count(args);
  }

  async publishers(
    args: Prisma.PublisherFindManyArgs
  ): Promise<PrismaPublisher[]> {
    return this.prisma.publisher.findMany(args);
  }
  async publisher(
    args: Prisma.PublisherFindUniqueArgs
  ): Promise<PrismaPublisher | null> {
    return this.prisma.publisher.findUnique(args);
  }
  async createPublisher(
    args: Prisma.PublisherCreateArgs
  ): Promise<PrismaPublisher> {
    return this.prisma.publisher.create(args);
  }
  async updatePublisher(
    args: Prisma.PublisherUpdateArgs
  ): Promise<PrismaPublisher> {
    return this.prisma.publisher.update(args);
  }
  async deletePublisher(
    args: Prisma.PublisherDeleteArgs
  ): Promise<PrismaPublisher> {
    return this.prisma.publisher.delete(args);
  }

  async findBooks(
    parentId: string,
    args: Prisma.BookFindManyArgs
  ): Promise<PrismaBook[]> {
    return this.prisma.publisher
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .books(args);
  }
}
